////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	
	//Sample the pixel color from the texture using a sampler at thsi texture coordinate location
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	//Lighting equation
	//Invert light direction for calculation
	lightDir = -lightDirection;
	
	//Calculate the amt of light on this pixel
	lightIntensity = 0.5*saturate(dot(input.normal, lightDir))+0.5;
	
	//Calculate the amt of light on this pixel
	color = saturate(diffuseColor * lightIntensity);
	
	//multiply the texture pixel and the final diffuse color to get the final pixel result
	color = color * textureColor;
	
	return color;
}